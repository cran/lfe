
R Under development (unstable) (2014-03-05 r65126) -- "Unsuffered Consequences"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "lfe"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('lfe')
Loading required package: Matrix
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("btrap")
> ### * btrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: btrap
> ### Title: Bootstrap standard errors for the group fixed effects
> ### Aliases: btrap
> 
> ### ** Examples
> 
> oldopts <- options(lfe.threads=2)
> ## create covariates
> x <- rnorm(3000)
> x2 <- rnorm(length(x))
> 
> ## create individual and firm
> id <- factor(sample(700,length(x),replace=TRUE))
> firm <- factor(sample(300,length(x),replace=TRUE))
> 
> ## effects
> id.eff <- rlnorm(nlevels(id))
> firm.eff <- rexp(nlevels(firm))
> 
> ## left hand side
> y <- x + 0.25*x2 + id.eff[id] + firm.eff[firm] + rnorm(length(x))
> 
> ## estimate and print result
> est <- felm(y ~ x+x2 | id + firm)
> summary(est)

Call:
   felm(formula = y ~ x + x2 | id + firm) 

Residuals:
       Min         1Q     Median         3Q        Max 
-3.305e+00 -5.541e-01  2.457e-17  5.560e-01  2.646e+00 

Coefficients:
   Estimate Std. Error t value Pr(>|t|)    
x   1.01027    0.02219   45.52   <2e-16 ***
x2  0.23879    0.02319   10.30   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.032 on 2010 degrees of freedom
Multiple R-squared: 0.8997   Adjusted R-squared: 0.8503 
F-statistic:18.23 on 989 and 2010 DF, p-value: < 2.2e-16 


> ## extract the group effects
> alpha <- getfe(est)
> head(alpha)
       effect obs comp fe idx
id.1 2.780164   4    1 id   1
id.2 1.305613   2    1 id   2
id.3 1.973887   3    1 id   3
id.4 3.479075   4    1 id   4
id.5 2.618930   2    1 id   5
id.6 4.341930   3    1 id   6
> ## bootstrap standard errors
> head(btrap(alpha,est))
       effect obs comp fe idx        se
id.1 2.780164   4    1 id   1 0.5523341
id.2 1.305613   2    1 id   2 0.8966099
id.3 1.973887   3    1 id   3 0.6436725
id.4 3.479075   4    1 id   4 0.5627443
id.5 2.618930   2    1 id   5 0.8533381
id.6 4.341930   3    1 id   6 0.7120945
> 
> ## bootstrap some differences
> ef <- function(v,addnames) {
+   w <- c(v[2]-v[1],v[3]-v[2],v[3]-v[1])
+   if(addnames) {
+      names(w) <-c('id2-id1','id3-id2','id3-id1')
+      attr(w,'extra') <- list(note=c('line1','line2','line3'))
+   }
+   w
+ }
> # check that it's estimable
> lfe:::is.estimable(ef,est$fe)
[1] TRUE
> 
> head(btrap(alpha,est,ef=ef))
            effect  note        se
id2-id1 -1.4745509 line1 0.8820537
id3-id2  0.6682742 line2 1.0241698
id3-id1 -0.8062767 line3 0.6654371
> options(oldopts)
> 
> 
> 
> cleanEx()

detaching ‘package:compiler’

> nameEx("compfactor")
> ### * compfactor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compfactor
> ### Title: Find the connected components
> ### Aliases: compfactor
> 
> ### ** Examples
> 
> ## create two factors
> f1 <- factor(sample(300,400,replace=TRUE))
> f2 <- factor(sample(300,400,replace=TRUE))
> 
> ## find the components
> cf <- compfactor(list(f1=f1,f2=f2))
> 
> ## show the third largest component
> fr <- data.frame(f1,f2,cf)
> fr[cf==3,]
     f1  f2 cf
55   22  17  3
100 182  17  3
179 182 253  3
252 280 253  3
254 182 118  3
367  22 170  3
> 
> 
> 
> cleanEx()
> nameEx("demeanlist")
> ### * demeanlist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: demeanlist
> ### Title: Centre vectors on multiple groups
> ### Aliases: demeanlist
> 
> ### ** Examples
> 
> oldopts <- options(lfe.threads=1)
> ## create a 15x3 matrix
> mtx <- matrix(rnorm(45),15,3)
> 
> ## a list of factors
> fl <- list(g1=factor(sample(2,nrow(mtx),replace=TRUE)),
+            g2=factor(sample(3,nrow(mtx),replace=TRUE)))
> 
> ## centre on both means and print result
> mtx0 <- demeanlist(mtx,fl)
> cbind(mtx0,g1=fl[[1]],g2=fl[[2]],comp=compfactor(fl))
                                           g1 g2 comp
 [1,] -0.61365567  0.328103075  0.81057508  1  1    1
 [2,]  0.19644146  0.356846421 -0.65089220  1  1    1
 [3,] -0.80585902  0.941962142  0.41688427  2  2    1
 [4,]  1.13067652  0.005335311  0.27256153  2  3    1
 [5,]  0.35927736  0.592027253 -1.34784689  2  2    1
 [6,] -1.28507266  0.103091488 -0.08862800  2  3    1
 [7,]  0.12599098  0.414752504 -0.16243090  1  3    1
 [8,]  0.87126050  0.521193002 -0.12460825  1  2    1
 [9,]  0.60555094 -1.991225764  1.12923804  2  2    1
[10,] -0.39575645  0.544360345  0.30957879  2  1    1
[11,]  1.42141310 -0.131594142 -0.61812056  2  1    1
[12,]  0.02840516 -0.523179303 -0.02150263  1  3    1
[13,] -0.60844244 -1.097715699  0.14885890  1  1    1
[14,] -2.18493030 -0.480024124  0.58587586  2  2    1
[15,]  1.15470051  0.416067492 -0.65954303  2  2    1
> 
> for(i in 1:ncol(mtx0))
+    for(n in names(fl))
+     cat('col',i,'group',n,'level sums:',tapply(mtx0[,i],fl[[n]],mean),'\n')
col 1 group g1 level sums: -3.295975e-17 2.464753e-17 
col 1 group g2 level sums: 1.110223e-17 -1.852179e-17 1.994932e-17 
col 2 group g1 level sums: -1.852179e-17 -2.779774e-18 
col 2 group g2 level sums: -1.665335e-17 0 -1.322727e-17 
col 3 group g1 level sums: -2.900241e-18 -4.619906e-18 
col 3 group g2 level sums: -1.10941e-17 -4.607859e-18 6.071532e-18 
> 
> options(oldopts)
> 
> 
> 
> cleanEx()
> nameEx("efactory")
> ### * efactory
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: efactory
> ### Title: Create estimable function
> ### Aliases: efactory
> 
> ### ** Examples
> 
> oldopts <- options(lfe.threads=1)
> id <- factor(sample(5000,50000,replace=TRUE))
> firm <- factor(sample(3000,50000,replace=TRUE))
> fl <- list(id=id,firm=firm)
> obj <- list(fe=fl,cfactor=compfactor(fl))
> ## the trivial least-norm  transformtion, which by the way is non-estimable
> print(ef <- efactory(obj,'ln'))
function (v, addnames) 
{
    if (addnames) {
        names(v) <- nm
        attr(v, "extra") <- list(obs = obs, comp = comp, fe = fef, 
            idx = idx)
    }
    v
}
<bytecode: 0x5a207a0>
<environment: 0x6499b40>
> is.estimable(ef,fl)
Warning in is.estimable(ef, fl) :
  non-estimable function, largest error 0.006 in coordinate 4013 ("id.4013")
[1] FALSE
> ## then the default
> print(ef <- efactory(obj,'ref'))
function (v, addnames) 
{
    esum <- sum(v[extrarefs])
    df <- v[refsubs]
    sub <- ifelse(is.na(df), 0, df)
    df <- v[refsuba]
    add <- ifelse(is.na(df), 0, df + esum)
    v <- v - sub + add
    if (addnames) {
        names(v) <- nm
        attr(v, "extra") <- list(obs = obs, comp = comp, fe = fef, 
            idx = idx)
    }
    v
}
<bytecode: 0x576cb68>
<environment: 0x6454da0>
attr(,"verified")
[1] TRUE
> is.estimable(ef,fl)
[1] TRUE
> # get the names of the coefficients, i.e. the nm-variable in the function
> head(evalq(nm,environment(ef)))
[1] "id.1" "id.2" "id.3" "id.4" "id.5" "id.6"
> options(oldopts)
> 
> 
> 
> cleanEx()

detaching ‘package:compiler’

> nameEx("felm")
> ### * felm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: felm
> ### Title: Fitting linear models with multiple group fixed effects
> ### Aliases: felm
> 
> ### ** Examples
> 
> oldopts <- options(lfe.threads=1)
> ## create covariates
> x <- rnorm(1000)
> x2 <- rnorm(length(x))
> 
> ## individual and firm
> id <- factor(sample(20,length(x),replace=TRUE))
> firm <- factor(sample(13,length(x),replace=TRUE))
> 
> ## effects for them
> id.eff <- rnorm(nlevels(id))
> firm.eff <- rnorm(nlevels(firm))
> 
> ## left hand side
> u <- rnorm(length(x))
> y <- x + 0.5*x2 + id.eff[id] + firm.eff[firm] + u
> 
> ## estimate and print result
> est <- felm(y ~ x+x2| id + firm)
> summary(est)

Call:
   felm(formula = y ~ x + x2 | id + firm) 

Residuals:
      Min        1Q    Median        3Q       Max 
-3.374591 -0.673907  0.003595  0.675516  3.155619 

Coefficients:
   Estimate Std. Error t value Pr(>|t|)    
x   1.05003    0.03185   32.97   <2e-16 ***
x2  0.44664    0.03183   14.03   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.029 on 966 degrees of freedom
Multiple R-squared: 0.8067   Adjusted R-squared: 0.7999 
F-statistic:122.2 on 33 and 966 DF, p-value: < 2.2e-16 


> ## compare with lm
> summary(lm(y ~ x + x2 + id + firm-1))

Call:
lm(formula = y ~ x + x2 + id + firm - 1)

Residuals:
    Min      1Q  Median      3Q     Max 
-3.3746 -0.6739  0.0036  0.6755  3.1556 

Coefficients:
       Estimate Std. Error t value Pr(>|t|)    
x       1.05003    0.03185  32.965  < 2e-16 ***
x2      0.44664    0.03183  14.030  < 2e-16 ***
id1     1.31504    0.19274   6.823 1.57e-11 ***
id2     0.61007    0.18689   3.264 0.001136 ** 
id3     1.57176    0.20173   7.792 1.70e-14 ***
id4    -0.69010    0.19719  -3.500 0.000487 ***
id5    -1.38659    0.18558  -7.472 1.77e-13 ***
id6     1.55398    0.18553   8.376  < 2e-16 ***
id7     1.91815    0.18638  10.292  < 2e-16 ***
id8     0.31021    0.17886   1.734 0.083162 .  
id9     2.41132    0.19405  12.426  < 2e-16 ***
id10    1.79850    0.19485   9.230  < 2e-16 ***
id11    0.55884    0.18544   3.014 0.002650 ** 
id12    0.51373    0.18143   2.832 0.004729 ** 
id13   -0.63525    0.21550  -2.948 0.003277 ** 
id14    2.60634    0.19311  13.496  < 2e-16 ***
id15    0.49960    0.19621   2.546 0.011043 *  
id16    0.03138    0.18597   0.169 0.866044    
id17   -0.44549    0.19612  -2.271 0.023338 *  
id18   -2.47039    0.18051 -13.686  < 2e-16 ***
id19   -0.17811    0.18339  -0.971 0.331693    
id20   -0.74519    0.18056  -4.127 3.99e-05 ***
firm2   1.24640    0.17868   6.976 5.64e-12 ***
firm3   0.58583    0.18579   3.153 0.001665 ** 
firm4  -2.11700    0.17286 -12.247  < 2e-16 ***
firm5  -0.21883    0.17136  -1.277 0.201898    
firm6  -1.17971    0.16337  -7.221 1.04e-12 ***
firm7  -1.88398    0.16691 -11.287  < 2e-16 ***
firm8  -1.68671    0.17730  -9.513  < 2e-16 ***
firm9  -1.61211    0.16407  -9.826  < 2e-16 ***
firm10 -1.36172    0.17284  -7.878 8.90e-15 ***
firm11  0.92869    0.17127   5.422 7.44e-08 ***
firm12 -1.94748    0.16877 -11.539  < 2e-16 ***
firm13  0.11082    0.17311   0.640 0.522214    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.029 on 966 degrees of freedom
Multiple R-squared:  0.8124,	Adjusted R-squared:  0.8058 
F-statistic:   123 on 34 and 966 DF,  p-value: < 2.2e-16

> 
> 
> # make a weird example with 'reverse causation'
> # Q and W are instrumented by x3 and the factor x4. Report robust s.e.
> x3 <- rnorm(length(x))
> x4 <- sample(12,length(x),replace=TRUE)
> 
> Q <- 0.3*x3 + x + 0.2*x2 + id.eff[id] + 0.3*log(x4) - 0.3*y + rnorm(length(x),sd=0.3)
> W <- 0.7*x3 - 2*x + 0.1*x2 - 0.7*id.eff[id] + 0.8*cos(x4) - 0.2*y+ rnorm(length(x),sd=0.6)
> 
> # add them to the outcome
> y <- y + Q + W
> 
> ivest <- felm(y ~ x + x2 | id+firm | (Q|W ~x3|x4))
> summary(ivest,robust=TRUE)

Call:
   felm(formula = y ~ x + x2 | id + firm | (Q | W ~ x3 | x4)) 

Residuals:
     Min       1Q   Median       3Q      Max 
-2.85722 -0.57050  0.00969  0.56208  2.42416 

Coefficients:
         Estimate Robust s.e t value Pr(>|t|)    
x         0.89520    0.18857   4.747 2.37e-06 ***
x2        0.44111    0.03226  13.675  < 2e-16 ***
`Q(fit)`  1.02579    0.12955   7.918 6.61e-15 ***
`W(fit)`  0.93813    0.05105  18.375  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.025 on 964 degrees of freedom
Multiple R-squared: 0.7459   Adjusted R-squared: 0.7364 
F-statistic(normal s.e.):90.04 on 35 and 964 DF, p-value: < 2.2e-16 
F-statistic(proj): 43.56 on 35 and 964 DF, p-value: < 2.2e-16 
*** F-test for robust/clustered standard errors is unreliable


> ## Not run: 
> ##D # compare with the not instrumented fit:
> ##D summary(felm(y ~ x + x2 +Q + W |id+firm))
> ## End(Not run)
> options(oldopts)
> 
> 
> 
> cleanEx()
> nameEx("getfe")
> ### * getfe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getfe
> ### Title: Retrieve the group fixed effects
> ### Aliases: getfe
> ### Keywords: regression models
> 
> ### ** Examples
> 
> oldopts <- options(lfe.threads=2)
> ## create covariates
> x <- rnorm(4000)
> x2 <- rnorm(length(x))
> 
> ## create individual and firm
> id <- factor(sample(500,length(x),replace=TRUE))
> firm <- factor(sample(300,length(x),replace=TRUE))
> 
> ## effects
> id.eff <- rlnorm(nlevels(id))
> firm.eff <- rexp(nlevels(firm))
> 
> ## left hand side
> y <- x + 0.25*x2 + id.eff[id] + firm.eff[firm] + rnorm(length(x))
> 
> ## estimate and print result
> est <- felm(y ~ x+x2 | id + firm)
> summary(est)

Call:
   felm(formula = y ~ x + x2 | id + firm) 

Residuals:
     Min       1Q   Median       3Q      Max 
-2.91423 -0.58410 -0.00928  0.57910  3.17329 

Coefficients:
   Estimate Std. Error t value Pr(>|t|)    
x   1.00768    0.01684   59.84   <2e-16 ***
x2  0.25075    0.01716   14.61   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9838 on 3199 degrees of freedom
Multiple R-squared: 0.9275   Adjusted R-squared: 0.9094 
F-statistic:51.19 on 800 and 3199 DF, p-value: < 2.2e-16 


> ## extract the group effects
> alpha <- getfe(est,se=TRUE)
> 
> ## find some estimable functions, with standard errors, we don't get
> ## names so we must precompute some numerical indices in ef
> idx <- match(c('id.5','id.6','firm.11','firm.12'),rownames(alpha))
> alpha[idx,]
             effect obs comp   fe idx        se
id.5     1.13152965   9    1   id   5 0.3850216
id.6     2.14526185   7    1   id   6 0.4261805
firm.11 -0.07364465  19    1 firm  11 0.3107118
firm.12  0.85743509  13    1 firm  12 0.3749424
> ef <- function(v,addnames) {
+   w <- c(v[idx[[2]]]-v[idx[[1]]],v[idx[[4]]]+v[idx[[1]]],
+          v[idx[[4]]]-v[idx[[3]]])
+   if(addnames) names(w) <-c('id6-id5','f12+id5','f12-f11')
+   w
+ }
> getfe(est,ef=ef,se=TRUE)
           effect        se
id6-id5 1.0137322 0.5371007
f12+id5 1.9889647 0.4355844
f12-f11 0.9310797 0.3489505
> options(oldopts)
> ## Not run: 
> ##D summary(lm(y ~ x+x2+id+firm-1))
> ## End(Not run)
> 
> 
> 
> cleanEx()

detaching ‘package:compiler’

> nameEx("is.estimable")
> ### * is.estimable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.estimable
> ### Title: Verify estimability of function
> ### Aliases: is.estimable
> 
> ### ** Examples
> 
> oldopts <- options(lfe.threads=1)
> ## create individual and firm
> id <- factor(sample(5000,50000,replace=TRUE))
> firm <- factor(sample(3000,50000,replace=TRUE))
> 
> ## create some estimable functions. It's faster to
> ## use numerical indices in ef rather than strings, and the input v
> ## to ef has no names, we have to add them when requested
> ef <- function(v,addnames) {
+   w <- c(v[6]-v[5],v[7000]+v[5],v[7000]-v[6000])
+   if(addnames) names(w) <-c('id6-id5','f2k+id5','f2k-f1k')
+   w
+ }
> is.estimable(ef,list(id=id,firm=firm))
[1] TRUE
> 
> ## Then make an error; in the last coordinate, sum two firms
> ef <- function(v,addnames) {
+   w <- c(v[6]-v[5],v[7000]+v[5],v[7000]+v[6000])
+   if(addnames) names(w) <-c('id6-id5','f2k+id5','f2k-f1k')
+   w
+ }
> is.estimable(ef, list(id=id,firm=firm), keepdiff=TRUE)
Warning in is.estimable(ef, list(id = id, firm = firm), keepdiff = TRUE) :
  non-estimable function, largest error 0.002 in coordinate 3 ("f2k-f1k")
[1] FALSE
attr(,"diff")
      id6-id5       f2k+id5       f2k-f1k 
-1.096185e-10  1.217011e-10  1.771467e-03 
> options(oldopts)
> 
> 
> 
> cleanEx()
> nameEx("kaczmarz")
> ### * kaczmarz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kaczmarz
> ### Title: Solve a linear system defined by factors
> ### Aliases: kaczmarz
> 
> ### ** Examples
> 
>   oldopts <- options(lfe.threads=1)
> ## create factors
>   f1 <- factor(sample(24000,100000,replace=TRUE))
>   f2 <- factor(sample(20000,length(f1),replace=TRUE))
>   f3 <- factor(sample(10000,length(f1),replace=TRUE))
>   f4 <- factor(sample(8000,length(f1),replace=TRUE))
> ## the matrix of dummies
>   D <- t(rBind(as(f1,'sparseMatrix'),as(f2,'sparseMatrix'),
+ as(f3,'sparseMatrix'), as(f4,'sparseMatrix')))
>   dim(D)
[1] 100000  61490
> ## an x
>   truex <- runif(ncol(D))
> ## and the right hand side
>   R <- as.vector(D %*% truex)
> ## solve it
>   sol <- kaczmarz(list(f1,f2,f3,f4),R)
> ## verify that the solution solves the system Dx = R
>   res <- D %*% sol - R
>   sqrt(sum(res^2))
[1] 2.804356e-07
> ## but the solution is not equal to the true x, because the system is
> ## underdetermined
>   sqrt(sum((sol - truex)^2))
[1] 52.72395
> ## moreover, the solution from kaczmarz has smaller norm
>   sqrt(sum(sol^2))
[1] 132.5157
>   sqrt(sum(truex^2))
[1] 142.6192
>   options(oldopts)
> 
> 
> 
> cleanEx()
> nameEx("lfe-package")
> ### * lfe-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lfe-package
> ### Title: Linear Group Fixed Effects
> ### Aliases: lfe-package lfe
> ### Keywords: regression models
> 
> ### ** Examples
> 
>   oldopts <- options(lfe.threads=1)
>   x <- rnorm(1000)
>   x2 <- rnorm(length(x))
>   id <- factor(sample(10,length(x),replace=TRUE))
>   firm <- factor(sample(3,length(x),replace=TRUE,prob=c(2,1.5,1)))
>   year <- factor(sample(10,length(x),replace=TRUE,prob=c(2,1.5,rep(1,8))))
>   id.eff <- rnorm(nlevels(id))
>   firm.eff <- rnorm(nlevels(firm))
>   year.eff <- rnorm(nlevels(year))
>   y <- x + 0.25*x2 + id.eff[id] + firm.eff[firm] +
+          year.eff[year] + rnorm(length(x))
>   est <- felm(y ~ x+x2 | id + firm + year)
>   summary(est)

Call:
   felm(formula = y ~ x + x2 | id + firm + year) 

Residuals:
     Min       1Q   Median       3Q      Max 
-3.78471 -0.63084 -0.01001  0.66853  2.64194 

Coefficients:
   Estimate Std. Error t value Pr(>|t|)    
x   0.99805    0.03080  32.407  < 2e-16 ***
x2  0.25640    0.03079   8.326 2.79e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9983 on 977 degrees of freedom
Multiple R-squared: 0.795   Adjusted R-squared: 0.7902 
F-statistic:172.2 on 22 and 977 DF, p-value: < 2.2e-16 
*** Standard errors may be too high due to more than 2 groups and exactDOF=FALSE


> 
>   getfe(est,se=TRUE)
            effect obs comp   fe idx         se
id.1    -0.1040100  99    1   id   1 0.12029526
id.2    -0.4122123  87    1   id   2 0.14964661
id.3    -1.2554127 110    1   id   3 0.11594847
id.4    -1.0318285 107    1   id   4 0.13963112
id.5    -0.4003577  95    1   id   5 0.13398280
id.6    -1.4981340 107    1   id   6 0.12842360
id.7    -0.2455824  83    1   id   7 0.12583298
id.8    -0.2301982  94    1   id   8 0.12422181
id.9    -1.0591430 102    1   id   9 0.11915875
id.10   -0.8622197 116    1   id  10 0.13626827
firm.1   0.0000000 415    1 firm   1 0.00000000
firm.2   2.0570303 362    1 firm   2 0.07821254
firm.3  -0.7119418 223    1 firm   3 0.09030566
year.1   0.0000000 162    2 year   1 0.00000000
year.2   2.3920443 120    2 year   2 0.11504754
year.3  -0.9493803  82    2 year   3 0.14016186
year.4   1.9013068  92    2 year   4 0.13276314
year.5  -0.9171550  88    2 year   5 0.11483397
year.6   0.8661089  94    2 year   6 0.11547519
year.7   0.6138608  82    2 year   7 0.13021004
year.8   0.2385705  79    2 year   8 0.13486766
year.9  -0.2289633  90    2 year   9 0.11699209
year.10  1.0767303 111    2 year  10 0.12875429
> # compare with an ordinary lm
>   summary(lm(y ~ x+x2+id+firm+year-1))

Call:
lm(formula = y ~ x + x2 + id + firm + year - 1)

Residuals:
    Min      1Q  Median      3Q     Max 
-3.7847 -0.6308 -0.0100  0.6685  2.6419 

Coefficients:
       Estimate Std. Error t value Pr(>|t|)    
x       0.99805    0.03080  32.407  < 2e-16 ***
x2      0.25640    0.03079   8.326 2.79e-16 ***
id1    -0.10401    0.12840  -0.810  0.41812    
id2    -0.41221    0.13607  -3.029  0.00251 ** 
id3    -1.25541    0.12435 -10.096  < 2e-16 ***
id4    -1.03183    0.12672  -8.143 1.17e-15 ***
id5    -0.40036    0.13020  -3.075  0.00216 ** 
id6    -1.49813    0.12743 -11.757  < 2e-16 ***
id7    -0.24558    0.13633  -1.801  0.07195 .  
id8    -0.23020    0.13105  -1.757  0.07931 .  
id9    -1.05914    0.13210  -8.018 3.06e-15 ***
id10   -0.86222    0.12265  -7.030 3.88e-12 ***
firm2   2.05703    0.07231  28.448  < 2e-16 ***
firm3  -0.71194    0.08338  -8.538  < 2e-16 ***
year2   2.39204    0.12067  19.822  < 2e-16 ***
year3  -0.94938    0.13579  -6.991 5.04e-12 ***
year4   1.90131    0.13113  14.500  < 2e-16 ***
year5  -0.91715    0.13313  -6.889 1.00e-11 ***
year6   0.86611    0.13003   6.661 4.53e-11 ***
year7   0.61386    0.13629   4.504 7.47e-06 ***
year8   0.23857    0.13809   1.728  0.08438 .  
year9  -0.22896    0.13165  -1.739  0.08231 .  
year10  1.07673    0.12389   8.691  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9983 on 977 degrees of freedom
Multiple R-squared:  0.801,	Adjusted R-squared:  0.7964 
F-statistic:   171 on 23 and 977 DF,  p-value: < 2.2e-16

>   options(oldopts)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  29.187 0.227 26.116 0.001 0.008 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
