
R Under development (unstable) (2014-01-01 r64612) -- "Unsuffered Consequences"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(lfe)
Loading required package: Matrix
> # From http://diffuseprior.wordpress.com/2012/06/15/standard-robust-and-clustered-standard-errors-computed-in-r/
> set.seed(42)
> options(lfe.threads=1, digits=3)
> ols <- function(form, data, robust=FALSE, cluster=NULL,digits=3){
+     r1 <- lm(form, data)
+       if(length(cluster)!=0){
+             data <- na.omit(data[,c(colnames(r1$model),cluster)])
+                 r1 <- lm(form, data)
+           }
+       X <- model.matrix(r1)
+       n <- dim(X)[1]
+       k <- dim(X)[2]
+       if(robust==FALSE & length(cluster)==0){
+             se <- sqrt(diag(solve(crossprod(X)) * as.numeric(crossprod(resid(r1))/(n-k))))
+                 res <- cbind(coef(r1),se)
+           }
+       if(robust==TRUE){
+             u <- matrix(resid(r1))
+                 meat1 <- t(X) %*% diag(diag(crossprod(t(u)))) %*% X
+                 dfc <- n/(n-k)
+                 se <- sqrt(dfc*diag(solve(crossprod(X)) %*% meat1 %*% solve(crossprod(X))))
+                 res <- cbind(coef(r1),se)
+           }
+       if(length(cluster)!=0){
+             clus <- cbind(X,data[,cluster],resid(r1))
+                 colnames(clus)[(dim(clus)[2]-1):dim(clus)[2]] <- c(cluster,"resid")
+                 m <- dim(table(clus[,cluster]))
+                 dfc <- (m/(m-1))*((n-1)/(n-k))
+                 uclust  <- apply(resid(r1)*X,2, function(x) tapply(x, clus[,cluster], sum))
+                 se <- sqrt(diag(solve(crossprod(X)) %*% (t(uclust) %*% uclust) %*% solve(crossprod(X)))*dfc)
+                 res <- cbind(coef(r1),se)
+           }
+       res <- cbind(res,res[,1]/res[,2],(1-pnorm(abs(res[,1]/res[,2])))*2)
+       res1 <- matrix(as.numeric(sprintf(paste("%.",paste(digits,"f",sep=""),sep=""),res)),nrow=dim(res)[1])
+       rownames(res1) <- rownames(res)
+       colnames(res1) <- c("Estimate","Std. Error","t value","Pr(>|t|)")
+       return(res1)
+   }
> 
> 
> 
> x <- rnorm(100)
> f1 <- sample(10,length(x), repl=T)
> f2 <- sample(10,length(x), repl=T)
> 
> y <- x +  log(f1) + cos(f2) + rnorm(length(x), sd=0.5)
> dat1 <- data.frame(y, x, f1=factor(f1), f2=factor(f2),cluster=factor(1:length(x)))
> #print(summary(lm(y ~ x + f1 + f2, dat1)))
> dat2 <- rbind(dat1,dat1)
> #summary(lm(y ~ x + f1 + f2, dat2))
> #clu <- factor(rep(1:length(x),2))
> clu <- dat2[,'cluster']
> summary(est <- felm(y ~x + G(f1) + G(f2), dat1))

Call:
   felm(formula = y ~ x + G(f1) + G(f2), data = dat1) 

Residuals:
    Min      1Q  Median      3Q     Max 
-0.9681 -0.2769 -0.0111  0.2671  0.9129 

Coefficients:
  Estimate Std. Error t value Pr(>|t|)    
x   0.9319     0.0497    18.7   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.452 on 80 degrees of freedom
Multiple R-squared: 0.916   Adjusted R-squared: 0.895 
F-statistic:45.8 on 19 and 80 DF, p-value: <2e-16 


> summary(est <- felm(y ~x + G(f1) + G(f2), dat2, clustervar='cluster'))

Call:
   felm(formula = y ~ x + G(f1) + G(f2), data = dat2, clustervar = "cluster") 

Residuals:
    Min      1Q  Median      3Q     Max 
-0.9681 -0.2769 -0.0111  0.2671  0.9129 

Coefficients:
  Estimate Cluster s.e. t value Pr(>|t|)    
x   0.9319       0.0434    21.5   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.426 on 180 degrees of freedom
Multiple R-squared: 0.916   Adjusted R-squared: 0.906 
F-statistic(normal s.e.): 103 on 19 and 180 DF, p-value: <2e-16 
F-statistic(proj): 24.3 on 19 and 180 DF, p-value: <2e-16 


> summary(est <- felm(y ~x + G(f1) + G(f2), dat2), robust=TRUE)

Call:
   felm(formula = y ~ x + G(f1) + G(f2), data = dat2) 

Residuals:
    Min      1Q  Median      3Q     Max 
-0.9681 -0.2769 -0.0111  0.2671  0.9129 

Coefficients:
  Estimate Robust s.e t value Pr(>|t|)    
x   0.9319     0.0306    30.4   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.426 on 180 degrees of freedom
Multiple R-squared: 0.916   Adjusted R-squared: 0.906 
F-statistic(normal s.e.): 103 on 19 and 180 DF, p-value: <2e-16 
F-statistic(proj): 48.8 on 19 and 180 DF, p-value: <2e-16 


> 
> # then the fixed effects.
> ef <- function(gamma, addnames) {
+   ref1 <- gamma[[1]]
+   ref2 <- gamma[[11]]
+   icpt <- ref1+ref2
+   res <- c(icpt,gamma[2:10]-ref1,gamma[12:20]-ref2)
+   if(addnames) {
+     names(res) <- c('icpt',paste('f1',2:10),paste('f2',2:10))
+   }
+   res
+ }
> 
> ols(y ~x + f1 + f2, dat2, robust=TRUE)
            Estimate Std. Error t value Pr(>|t|)
(Intercept)    0.637      0.138   4.622    0.000
x              0.932      0.031  30.441    0.000
f12            0.822      0.119   6.899    0.000
f13            1.212      0.165   7.354    0.000
f14            1.609      0.123  13.061    0.000
f15            1.969      0.143  13.719    0.000
f16            1.880      0.139  13.514    0.000
f17            2.684      0.212  12.677    0.000
f18            2.176      0.101  21.551    0.000
f19            2.226      0.115  19.313    0.000
f110           1.928      0.163  11.825    0.000
f22           -1.640      0.174  -9.407    0.000
f23           -1.561      0.177  -8.803    0.000
f24           -1.401      0.149  -9.404    0.000
f25           -0.870      0.141  -6.185    0.000
f26            0.466      0.140   3.337    0.001
f27            0.143      0.165   0.862    0.389
f28           -0.690      0.174  -3.972    0.000
f29           -1.721      0.148 -11.663    0.000
f210          -1.657      0.145 -11.438    0.000
> getfe(est,ef=ef,se=T,bN=2000, robust=TRUE)
      effect     se
icpt   0.637 0.1353
f1 2   0.822 0.1168
f1 3   1.212 0.1625
f1 4   1.609 0.1190
f1 5   1.969 0.1399
f1 6   1.880 0.1325
f1 7   2.684 0.2088
f1 8   2.176 0.0981
f1 9   2.226 0.1099
f1 10  1.928 0.1536
f2 2  -1.640 0.1727
f2 3  -1.561 0.1783
f2 4  -1.401 0.1497
f2 5  -0.870 0.1406
f2 6   0.466 0.1382
f2 7   0.143 0.1670
f2 8  -0.690 0.1716
f2 9  -1.721 0.1460
f2 10 -1.657 0.1459
> ols(y ~x + f1 + f2, dat2, cluster="cluster")
            Estimate Std. Error t value Pr(>|t|)
(Intercept)    0.637      0.195   3.260    0.001
x              0.932      0.043  21.471    0.000
f12            0.822      0.169   4.866    0.000
f13            1.212      0.234   5.187    0.000
f14            1.609      0.175   9.212    0.000
f15            1.969      0.203   9.676    0.000
f16            1.880      0.197   9.531    0.000
f17            2.684      0.300   8.942    0.000
f18            2.176      0.143  15.201    0.000
f19            2.226      0.163  13.622    0.000
f110           1.928      0.231   8.341    0.000
f22           -1.640      0.247  -6.635    0.000
f23           -1.561      0.251  -6.209    0.000
f24           -1.401      0.211  -6.633    0.000
f25           -0.870      0.199  -4.363    0.000
f26            0.466      0.198   2.354    0.019
f27            0.143      0.235   0.608    0.543
f28           -0.690      0.246  -2.802    0.005
f29           -1.721      0.209  -8.226    0.000
f210          -1.657      0.205  -8.068    0.000
> getfe(est,ef=ef,se=T,bN=2000, cluster=clu)
      effect    se
icpt   0.637 0.203
f1 2   0.822 0.172
f1 3   1.212 0.228
f1 4   1.609 0.176
f1 5   1.969 0.200
f1 6   1.880 0.195
f1 7   2.684 0.301
f1 8   2.176 0.140
f1 9   2.226 0.163
f1 10  1.928 0.231
f2 2  -1.640 0.243
f2 3  -1.561 0.250
f2 4  -1.401 0.217
f2 5  -0.870 0.204
f2 6   0.466 0.198
f2 7   0.143 0.243
f2 8  -0.690 0.255
f2 9  -1.721 0.214
f2 10 -1.657 0.211
> 
> proc.time()
   user  system elapsed 
 12.016   0.112  10.873 
